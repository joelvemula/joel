// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package local_project.mongodb_to_sqlserver_extract_sdmquestionnaire_load_outputfile_sdmquestionnaire_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire Purpose: MongoDB_job<br>
 * Description: This job is to extract all the questions from sdm.Questionnaire collection and load them into sdm.Questionnaire table and also to output file to creat e the dynamic dimension tables <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(PostgresqlIBmCloud_Server != null){
				
					this.setProperty("PostgresqlIBmCloud_Server", PostgresqlIBmCloud_Server.toString());
				
			}
			
			if(PostgresqlIBmCloud_Database != null){
				
					this.setProperty("PostgresqlIBmCloud_Database", PostgresqlIBmCloud_Database.toString());
				
			}
			
			if(PostgresqlIBmCloud_Login != null){
				
					this.setProperty("PostgresqlIBmCloud_Login", PostgresqlIBmCloud_Login.toString());
				
			}
			
			if(PostgresqlIBmCloud_Password != null){
				
					this.setProperty("PostgresqlIBmCloud_Password", PostgresqlIBmCloud_Password.toString());
				
			}
			
			if(PostgresqlIBmCloud_Port != null){
				
					this.setProperty("PostgresqlIBmCloud_Port", PostgresqlIBmCloud_Port.toString());
				
			}
			
			if(PostgresqlIBmCloud_AdditionalParams != null){
				
					this.setProperty("PostgresqlIBmCloud_AdditionalParams", PostgresqlIBmCloud_AdditionalParams.toString());
				
			}
			
			if(PostgresqlIBmCloud_Schema != null){
				
					this.setProperty("PostgresqlIBmCloud_Schema", PostgresqlIBmCloud_Schema.toString());
				
			}
			
			if(password != null){
				
					this.setProperty("password", password.toString());
				
			}
			
			if(host1 != null){
				
					this.setProperty("host1", host1.toString());
				
			}
			
			if(host2 != null){
				
					this.setProperty("host2", host2.toString());
				
			}
			
			if(host3 != null){
				
					this.setProperty("host3", host3.toString());
				
			}
			
			if(port != null){
				
					this.setProperty("port", port.toString());
				
			}
			
			if(user != null){
				
					this.setProperty("user", user.toString());
				
			}
			
			if(KeyStore != null){
				
					this.setProperty("KeyStore", KeyStore.toString());
				
			}
			
		}

public String PostgresqlIBmCloud_Server;
public String getPostgresqlIBmCloud_Server(){
	return this.PostgresqlIBmCloud_Server;
}
public String PostgresqlIBmCloud_Database;
public String getPostgresqlIBmCloud_Database(){
	return this.PostgresqlIBmCloud_Database;
}
public String PostgresqlIBmCloud_Login;
public String getPostgresqlIBmCloud_Login(){
	return this.PostgresqlIBmCloud_Login;
}
public java.lang.String PostgresqlIBmCloud_Password;
public java.lang.String getPostgresqlIBmCloud_Password(){
	return this.PostgresqlIBmCloud_Password;
}
public String PostgresqlIBmCloud_Port;
public String getPostgresqlIBmCloud_Port(){
	return this.PostgresqlIBmCloud_Port;
}
public String PostgresqlIBmCloud_AdditionalParams;
public String getPostgresqlIBmCloud_AdditionalParams(){
	return this.PostgresqlIBmCloud_AdditionalParams;
}
public String PostgresqlIBmCloud_Schema;
public String getPostgresqlIBmCloud_Schema(){
	return this.PostgresqlIBmCloud_Schema;
}
public java.lang.String password;
public java.lang.String getPassword(){
	return this.password;
}
public String host1;
public String getHost1(){
	return this.host1;
}
public String host2;
public String getHost2(){
	return this.host2;
}
public String host3;
public String getHost3(){
	return this.host3;
}
public Integer port;
public Integer getPort(){
	return this.port;
}
public String user;
public String getUser(){
	return this.user;
}
public String KeyStore;
public String getKeyStore(){
	return this.KeyStore;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tSetKeystore_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSetKeystore_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMongoDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMongoDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMongoDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMongoDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMongoDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tExtractJSONFields_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMongoDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tExtractJSONFields_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMongoDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMongoDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMongoDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWriteJSONField_1_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tWriteJSONField_1_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void tWriteJSONField_1_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMongoDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSetKeystore_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMongoDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMongoDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWriteJSONField_1_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tSetKeystore_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSetKeystore_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tSetKeystore_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSetKeystore_1", false);
		start_Hash.put("tSetKeystore_1", System.currentTimeMillis());
		
	
	currentComponent="tSetKeystore_1";

	
		int tos_count_tSetKeystore_1 = 0;
		

 



/**
 * [tSetKeystore_1 begin ] stop
 */
	
	/**
	 * [tSetKeystore_1 main ] start
	 */

	

	
	
	currentComponent="tSetKeystore_1";

	



    javax.net.ssl.HttpsURLConnection.setDefaultHostnameVerifier(
        new javax.net.ssl.HostnameVerifier(){
            public boolean verify(String hostName,javax.net.ssl.SSLSession session) {
                return true;
            }

            // Note we need this method as well or else it won't work the with the
            // deprecated HostnameVerifier interface
            public boolean verify(final String host, final String certHostname) {
                return true;
            }
        });
    System.setProperty("javax.net.ssl.trustStore", context.KeyStore);
    System.setProperty("javax.net.ssl.trustStoreType", "JKS");
    
     
	final String decryptedPassword_tSetKeystore_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:B40dTLVCCx2ek3CtUfpHNVzQuodwujQ1FxAS80UELd24gQ==");
    
    
    System.setProperty("javax.net.ssl.trustStorePassword", decryptedPassword_tSetKeystore_1);
	System.setProperty("javax.net.ssl.keyStore", context.KeyStore);
    System.setProperty("javax.net.ssl.keyStoreType", "JKS");
    
     
	String decryptedPwd_tSetKeystore_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:V0VDcIEdlt/kJkLaRCnesTHZNgwWDKm5/R5YTSTzk8PizA==");
	
    
    System.setProperty("javax.net.ssl.keyStorePassword",decryptedPwd_tSetKeystore_1);
	        

 


	tos_count_tSetKeystore_1++;

/**
 * [tSetKeystore_1 main ] stop
 */
	
	/**
	 * [tSetKeystore_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSetKeystore_1";

	

 



/**
 * [tSetKeystore_1 process_data_begin ] stop
 */
	
	/**
	 * [tSetKeystore_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSetKeystore_1";

	

 



/**
 * [tSetKeystore_1 process_data_end ] stop
 */
	
	/**
	 * [tSetKeystore_1 end ] start
	 */

	

	
	
	currentComponent="tSetKeystore_1";

	

 

ok_Hash.put("tSetKeystore_1", true);
end_Hash.put("tSetKeystore_1", System.currentTimeMillis());




/**
 * [tSetKeystore_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tSetKeystore_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tMongoDBConnection_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSetKeystore_1 finally ] start
	 */

	

	
	
	currentComponent="tSetKeystore_1";

	

 



/**
 * [tSetKeystore_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSetKeystore_1_SUBPROCESS_STATE", 1);
	}
	

public void tMongoDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMongoDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tMongoDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMongoDBConnection_1", false);
		start_Hash.put("tMongoDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tMongoDBConnection_1";

	
		int tos_count_tMongoDBConnection_1 = 0;
		

			java.util.logging.Logger.getLogger("org.mongodb.driver").setLevel(java.util.logging.Level.SEVERE);
    com.mongodb.MongoClientOptions clientOptions_tMongoDBConnection_1 = new com.mongodb.MongoClientOptions.Builder()
                    .socketFactory(javax.net.ssl.SSLSocketFactory.getDefault())

                    .build();

    // Empty client credentials list
    java.util.List<com.mongodb.MongoCredential> mongoCredentialList_tMongoDBConnection_1 = new java.util.ArrayList<com.mongodb.MongoCredential>();

        com.mongodb.MongoCredential mongoCredential_tMongoDBConnection_1;
	final String decryptedPassword_tMongoDBConnection_1 = context.password; 
                    mongoCredential_tMongoDBConnection_1 = com.mongodb.MongoCredential.createCredential(context.user, "admin", new String(decryptedPassword_tMongoDBConnection_1).toCharArray());
        mongoCredentialList_tMongoDBConnection_1.add(mongoCredential_tMongoDBConnection_1);
        List<com.mongodb.ServerAddress> serverAddressList_tMongoDBConnection_1 = new java.util.ArrayList<com.mongodb.ServerAddress>();
            serverAddressList_tMongoDBConnection_1.add(new com.mongodb.ServerAddress(context.host1,context.port));
            serverAddressList_tMongoDBConnection_1.add(new com.mongodb.ServerAddress(context.host2,context.port));
            serverAddressList_tMongoDBConnection_1.add(new com.mongodb.ServerAddress(context.host3,context.port));
			com.mongodb.Mongo mongo_tMongoDBConnection_1 = new com.mongodb.MongoClient(serverAddressList_tMongoDBConnection_1, mongoCredentialList_tMongoDBConnection_1, clientOptions_tMongoDBConnection_1);
    mongo_tMongoDBConnection_1.getAddress() ;
		com.mongodb.DB db_tMongoDBConnection_1 = mongo_tMongoDBConnection_1.getDB("sdm");
	
    
            mongo_tMongoDBConnection_1.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
    globalMap.put("mongo_tMongoDBConnection_1", mongo_tMongoDBConnection_1);
    globalMap.put("db_tMongoDBConnection_1", db_tMongoDBConnection_1);

 



/**
 * [tMongoDBConnection_1 begin ] stop
 */
	
	/**
	 * [tMongoDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tMongoDBConnection_1";

	

 


	tos_count_tMongoDBConnection_1++;

/**
 * [tMongoDBConnection_1 main ] stop
 */
	
	/**
	 * [tMongoDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMongoDBConnection_1";

	

 



/**
 * [tMongoDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tMongoDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMongoDBConnection_1";

	

 



/**
 * [tMongoDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tMongoDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tMongoDBConnection_1";

	

 

ok_Hash.put("tMongoDBConnection_1", true);
end_Hash.put("tMongoDBConnection_1", System.currentTimeMillis());




/**
 * [tMongoDBConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tMongoDBConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tMongoDBInput_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMongoDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tMongoDBConnection_1";

	

 



/**
 * [tMongoDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMongoDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class questionnairesStruct implements routines.system.IPersistableRow<questionnairesStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire = new byte[0];

	
			    public String _id;

				public String get_id () {
					return this._id;
				}
				
			    public String questions;

				public String getQuestions () {
					return this.questions;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire.length == 0) {
   					commonByteArray_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire) {

        	try {

        		int length = 0;
		
					this._id = readString(dis);
					
					this.questions = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this._id,dos);
					
					// String
				
						writeString(this.questions,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("_id="+_id);
		sb.append(",questions="+questions);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(questionnairesStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire = new byte[0];

	
			    public String _id;

				public String get_id () {
					return this._id;
				}
				
			    public String questions;

				public String getQuestions () {
					return this.questions;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire.length == 0) {
   					commonByteArray_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire) {

        	try {

        		int length = 0;
		
					this._id = readString(dis);
					
					this.questions = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this._id,dos);
					
					// String
				
						writeString(this.questions,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("_id="+_id);
		sb.append(",questions="+questions);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMongoDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMongoDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
questionnairesStruct questionnaires = new questionnairesStruct();





	
	/**
	 * [tWriteJSONField_1_Out begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_1_Out", false);
		start_Hash.put("tWriteJSONField_1_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_Out";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"questionnaires");
					}
				
		int tos_count_tWriteJSONField_1_Out = 0;
		
//tWriteXMLFieldOut_begin
				int nb_line_tWriteJSONField_1_Out = 0;
				boolean needRoot_tWriteJSONField_1_Out  = true;
				
				String  strCompCache_tWriteJSONField_1_Out= null;		
				
						        java.util.Queue<row2Struct> listGroupby_tWriteJSONField_1_Out = new java.util.concurrent.ConcurrentLinkedQueue<row2Struct>();
							
	
					class ThreadXMLField_tWriteJSONField_1_Out extends Thread {
						
									    java.util.Queue<row2Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_tWriteJSONField_1_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_tWriteJSONField_1_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_tWriteJSONField_1_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_tWriteJSONField_1_In", queue);
							globalMap.put("flows_tWriteJSONField_1_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								tWriteJSONField_1_InProcess(globalMap);
							} catch (TalendException te) {
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_tWriteJSONField_1_Out txf_tWriteJSONField_1_Out = new ThreadXMLField_tWriteJSONField_1_Out(listGroupby_tWriteJSONField_1_Out);
					
					txf_tWriteJSONField_1_Out.start();
				

java.util.List<java.util.List<String>> groupbyList_tWriteJSONField_1_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_tWriteJSONField_1_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_tWriteJSONField_1_Out = new java.util.HashMap<String,String>();

class NestXMLTool_tWriteJSONField_1_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}
			if (root.content().size() == 0 
    			&& root.attributes().size() == 0 
    			&& root.declaredNamespaces().size() == 0) {
    			if(root.getParent()!=null){
                	root.getParent().remove(root);
                }
            }
		}
	}
	
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_tWriteJSONField_1_Out nestXMLTool_tWriteJSONField_1_Out = new NestXMLTool_tWriteJSONField_1_Out();

questionnairesStruct  rowStructOutput_tWriteJSONField_1_Out = new questionnairesStruct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_tWriteJSONField_1_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_tWriteJSONField_1_Out = null;
org.dom4j.Document doc_tWriteJSONField_1_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_tWriteJSONField_1_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_tWriteJSONField_1_Out.setNewLineAfterDeclaration(false);
format_tWriteJSONField_1_Out.setTrimText(false);
format_tWriteJSONField_1_Out.setEncoding("ISO-8859-15");
int[] orders_tWriteJSONField_1_Out = new int[1];

 



/**
 * [tWriteJSONField_1_Out begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
questionnairesStruct questionnaires_tmp = new questionnairesStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tMongoDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMongoDBInput_3", false);
		start_Hash.put("tMongoDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tMongoDBInput_3";

	
		int tos_count_tMongoDBInput_3 = 0;
		

	int nb_line_tMongoDBInput_3 = 0;
	
		
		
			com.mongodb.Mongo mongo_tMongoDBInput_3=null;
			com.mongodb.DB db_tMongoDBInput_3=null;
		

			
			
				
				
				mongo_tMongoDBInput_3=(com.mongodb.Mongo)globalMap.get("mongo_tMongoDBConnection_1");
				db_tMongoDBInput_3 = (com.mongodb.DB) globalMap.get("db_tMongoDBConnection_1");
				


				
			            mongo_tMongoDBInput_3.setReadPreference(com.mongodb.ReadPreference.nearest());
			            
				
					com.mongodb.DBCollection coll_tMongoDBInput_3 = db_tMongoDBInput_3.getCollection("Questionnaire");
				
				
				
				try{
					// Add warning if an index is not in the query.
					boolean needIndexWarning = true;
					String indexList = "";
					
					for (com.mongodb.DBObject index: coll_tMongoDBInput_3.getIndexInfo()) {
					
	                
	                    for (String key: ((com.mongodb.DBObject)index.get("key")).keySet()) {
	                        // The regexp is:
	                        // - contain the db DBcolumnName between two backslashed quotes
	                        // - is followed at some point by a colon
	                        // - there is no comma between the the DBcolumnName and the colon
	                        if  (("{category:'Standard'}").matches(".*" + key + "[^,]*:.*")) {
	                            // We have an index, do not print error message
	                            needIndexWarning = false;
	                        } else {
	                            // This index is not in the query, add it into the indexList
	                            indexList += ", " + key;
	                        }
	                    }
	                }
	                if ((!"".equals(indexList)) && (needIndexWarning)) {
	                    
	                        System.err.println("tMongoDBInput_3 - The query does not contain any reference an index.  [" + indexList.substring(1) + " ]");
	                        
	                }
	            }catch(com.mongodb.MongoException e){
	            	// caught an exception after issuing the getIndexInfo()
	            	// don't fail the whole job
	            	// maybe due to authorization
	            }

	                
	                
					com.mongodb.DBObject myQuery_tMongoDBInput_3 = (com.mongodb.DBObject) com.mongodb.util.JSON.parse("{category:'Standard'}");
		    		com.mongodb.DBObject fields_tMongoDBInput_3 = new com.mongodb.BasicDBObject();
		  			com.mongodb.DBCursor cursor_tMongoDBInput_3 = coll_tMongoDBInput_3.find(myQuery_tMongoDBInput_3, fields_tMongoDBInput_3);
					
	                
		  			
		  			

		  			 
	                
				
				class DBObjectInputUtil_tMongoDBInput_3{
					// Get the node value in embedded document, 
					//If have no embedded document get root document node.
					
					public Object getValue(String parentNode,String currentName,com.mongodb.DBObject dbObject){
						Object value=null;
						if(dbObject==null){
							return null;
						}
						if (parentNode == null || "".equals(parentNode)) {
						    if ("*".equals(currentName)) {
						        value = dbObject;
						    } else if (dbObject.get(currentName)!=null){
								value=dbObject.get(currentName);
							}
						}else{
							String objNames[] = objNames = parentNode.split("\\.");
							com.mongodb.DBObject currentObj=dbObject;
							for(int i=0;i<objNames.length;i++){
								currentObj=(com.mongodb.DBObject)currentObj.get(objNames[i]);
								if(currentObj==null){
									break;
								}
							}
							if ("*".equals(currentName)) {
                                value = currentObj;
                            } else if(currentObj!=null){
								value=currentObj.get(currentName);
							}
						}
						return value;
					}
				}
				DBObjectInputUtil_tMongoDBInput_3 dbObjectInputUtil_tMongoDBInput_3=new DBObjectInputUtil_tMongoDBInput_3();
				java.util.Map<String, String> pathMap_tMongoDBInput_3=new java.util.HashMap<String, String>();
				pathMap_tMongoDBInput_3.put("_id","");
				pathMap_tMongoDBInput_3.put("questions","");

						
				while (cursor_tMongoDBInput_3.hasNext()){
				com.mongodb.DBObject o_tMongoDBInput_3 = cursor_tMongoDBInput_3.next();
				nb_line_tMongoDBInput_3++;
				Object valueObj_tMongoDBInput_3=null;
                    valueObj_tMongoDBInput_3=dbObjectInputUtil_tMongoDBInput_3.getValue(pathMap_tMongoDBInput_3.get("_id"),"_id",o_tMongoDBInput_3);
				if(valueObj_tMongoDBInput_3!=null && valueObj_tMongoDBInput_3.toString().length() > 0) {
					row1._id = valueObj_tMongoDBInput_3.toString();
				}else{
					row1._id = null;
				}
                    valueObj_tMongoDBInput_3=dbObjectInputUtil_tMongoDBInput_3.getValue(pathMap_tMongoDBInput_3.get("questions"),"questions",o_tMongoDBInput_3);
				if(valueObj_tMongoDBInput_3!=null && valueObj_tMongoDBInput_3.toString().length() > 0) {
					row1.questions = valueObj_tMongoDBInput_3.toString();
				}else{
					row1.questions = null;
				}


 



/**
 * [tMongoDBInput_3 begin ] stop
 */
	
	/**
	 * [tMongoDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tMongoDBInput_3";

	

 


	tos_count_tMongoDBInput_3++;

/**
 * [tMongoDBInput_3 main ] stop
 */
	
	/**
	 * [tMongoDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMongoDBInput_3";

	

 



/**
 * [tMongoDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

questionnaires = null;


// # Output table : 'questionnaires'
questionnaires_tmp._id = row1._id ;
questionnaires_tmp.questions = row1.questions ;
questionnaires = questionnaires_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "questionnaires"
if(questionnaires != null) { 



	
	/**
	 * [tWriteJSONField_1_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_Out";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"questionnaires");
					}
					

	if(txf_tWriteJSONField_1_Out.getLastException()!=null) {
		currentComponent = txf_tWriteJSONField_1_Out.getCurrentComponent();
		throw txf_tWriteJSONField_1_Out.getLastException();
	}
	
	if(txf_tWriteJSONField_1_Out.getLastError()!=null) {
		throw txf_tWriteJSONField_1_Out.getLastError();
	}
	nb_line_tWriteJSONField_1_Out++;
	valueMap_tWriteJSONField_1_Out.clear();
	arraysValueMap_tWriteJSONField_1_Out.clear();
	valueMap_tWriteJSONField_1_Out.put("_id",
	(
		questionnaires._id != null?
            questionnaires._id.toString():null
		));
	arraysValueMap_tWriteJSONField_1_Out.put("_id",
	(
		questionnaires._id != null?
            questionnaires._id.toString():null
		));
	valueMap_tWriteJSONField_1_Out.put("questions",
	(
		questionnaires.questions != null?
            questionnaires.questions.toString():null
		));
	arraysValueMap_tWriteJSONField_1_Out.put("questions",
	(
		questionnaires.questions != null?
            questionnaires.questions.toString():null
		));
		String strTemp_tWriteJSONField_1_Out = "";		strTemp_tWriteJSONField_1_Out = strTemp_tWriteJSONField_1_Out + valueMap_tWriteJSONField_1_Out.get("_id")
							+ valueMap_tWriteJSONField_1_Out.get("_id").length();
	if(strCompCache_tWriteJSONField_1_Out==null){
		strCompCache_tWriteJSONField_1_Out=strTemp_tWriteJSONField_1_Out;
		
            	rowStructOutput_tWriteJSONField_1_Out._id = questionnaires._id;
            	
	}else{
		//the data read is different from the data read last time. 
		if(!strCompCache_tWriteJSONField_1_Out.equals(strTemp_tWriteJSONField_1_Out)){	  
    		nestXMLTool_tWriteJSONField_1_Out.replaceDefaultNameSpace(doc_tWriteJSONField_1_Out.getRootElement());			
			java.io.StringWriter strWriter_tWriteJSONField_1_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_tWriteJSONField_1_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_1_Out, format_tWriteJSONField_1_Out);
			output_tWriteJSONField_1_Out.write(doc_tWriteJSONField_1_Out);
		    output_tWriteJSONField_1_Out.close();
			
				  		  row2Struct row_tWriteJSONField_1_Out = new row2Struct();
						  
								row_tWriteJSONField_1_Out._id = rowStructOutput_tWriteJSONField_1_Out._id;
								
					     		row_tWriteJSONField_1_Out.questionstree = strWriter_tWriteJSONField_1_Out.toString();
					     		listGroupby_tWriteJSONField_1_Out.add(row_tWriteJSONField_1_Out);
					
		    doc_tWriteJSONField_1_Out.clearContent();
			needRoot_tWriteJSONField_1_Out = true;
			for(int i_tWriteJSONField_1_Out=0;i_tWriteJSONField_1_Out<orders_tWriteJSONField_1_Out.length;i_tWriteJSONField_1_Out++){
				orders_tWriteJSONField_1_Out[i_tWriteJSONField_1_Out] = 0;
			}
			
			if(groupbyList_tWriteJSONField_1_Out != null && groupbyList_tWriteJSONField_1_Out.size() >= 0){
				groupbyList_tWriteJSONField_1_Out.clear();
			}
			strCompCache_tWriteJSONField_1_Out=strTemp_tWriteJSONField_1_Out;
            	rowStructOutput_tWriteJSONField_1_Out._id = questionnaires._id;
            	
		}
	}

	org.dom4j.Element subTreeRootParent_tWriteJSONField_1_Out = null;
	
	// build root xml tree 
	if (needRoot_tWriteJSONField_1_Out) {
		needRoot_tWriteJSONField_1_Out=false;
		org.dom4j.Element root_tWriteJSONField_1_Out = doc_tWriteJSONField_1_Out.addElement("questionst");
		subTreeRootParent_tWriteJSONField_1_Out = root_tWriteJSONField_1_Out;
		org.dom4j.Element root_0_tWriteJSONField_1_Out = root_tWriteJSONField_1_Out.addElement("_id");
		if(
		valueMap_tWriteJSONField_1_Out.get("_id")!=null){
			nestXMLTool_tWriteJSONField_1_Out .setText(root_0_tWriteJSONField_1_Out,
		valueMap_tWriteJSONField_1_Out.get("_id"));
		}
		root4Group_tWriteJSONField_1_Out = subTreeRootParent_tWriteJSONField_1_Out;
	}else{
		subTreeRootParent_tWriteJSONField_1_Out=root4Group_tWriteJSONField_1_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_tWriteJSONField_1_Out = org.dom4j.DocumentHelper.createElement("questionstree");
        if(orders_tWriteJSONField_1_Out[0]==0){
        	orders_tWriteJSONField_1_Out[0] = 1;
        }
        if(1 < orders_tWriteJSONField_1_Out.length){
        		orders_tWriteJSONField_1_Out[1] = 0;
        }
        subTreeRootParent_tWriteJSONField_1_Out.elements().add(orders_tWriteJSONField_1_Out[0]++,loop_tWriteJSONField_1_Out);
		if(
		valueMap_tWriteJSONField_1_Out.get("questions")!=null){
			nestXMLTool_tWriteJSONField_1_Out .setText(loop_tWriteJSONField_1_Out,
		valueMap_tWriteJSONField_1_Out.get("questions"));
		}

 


	tos_count_tWriteJSONField_1_Out++;

/**
 * [tWriteJSONField_1_Out main ] stop
 */
	
	/**
	 * [tWriteJSONField_1_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_Out";

	

 



/**
 * [tWriteJSONField_1_Out process_data_begin ] stop
 */
	
	/**
	 * [tWriteJSONField_1_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_Out";

	

 



/**
 * [tWriteJSONField_1_Out process_data_end ] stop
 */

} // End of branch "questionnaires"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tMongoDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMongoDBInput_3";

	

 



/**
 * [tMongoDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tMongoDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tMongoDBInput_3";

	

		}
		
globalMap.put("tMongoDBInput_3_NB_LINE", nb_line_tMongoDBInput_3);

 

ok_Hash.put("tMongoDBInput_3", true);
end_Hash.put("tMongoDBInput_3", System.currentTimeMillis());




/**
 * [tMongoDBInput_3 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tWriteJSONField_1_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_Out";

	

if(nb_line_tWriteJSONField_1_Out > 0){  
    nestXMLTool_tWriteJSONField_1_Out.replaceDefaultNameSpace(doc_tWriteJSONField_1_Out.getRootElement());
	java.io.StringWriter strWriter_tWriteJSONField_1_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_tWriteJSONField_1_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_1_Out, format_tWriteJSONField_1_Out);
	output_tWriteJSONField_1_Out.write(doc_tWriteJSONField_1_Out);
    output_tWriteJSONField_1_Out.close();
					row2Struct row_tWriteJSONField_1_Out = new row2Struct();
						  
								row_tWriteJSONField_1_Out._id = rowStructOutput_tWriteJSONField_1_Out._id;
								
					     		row_tWriteJSONField_1_Out.questionstree = strWriter_tWriteJSONField_1_Out.toString();
					     		listGroupby_tWriteJSONField_1_Out.add(row_tWriteJSONField_1_Out);
		    		

}
globalMap.put("tWriteJSONField_1_Out_NB_LINE",nb_line_tWriteJSONField_1_Out);
globalMap.put("tWriteJSONField_1_In_FINISH" + (listGroupby_tWriteJSONField_1_Out==null?"":listGroupby_tWriteJSONField_1_Out.hashCode()), "true");
	
		txf_tWriteJSONField_1_Out.join();
		
		if(txf_tWriteJSONField_1_Out.getLastException()!=null) {
			currentComponent = txf_tWriteJSONField_1_Out.getCurrentComponent();
			throw txf_tWriteJSONField_1_Out.getLastException();
		}
		
		if(txf_tWriteJSONField_1_Out.getLastError()!=null) {
			throw txf_tWriteJSONField_1_Out.getLastError();
		}
	
resourceMap.put("finish_tWriteJSONField_1_Out", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"questionnaires");
			  	}
			  	
 

ok_Hash.put("tWriteJSONField_1_Out", true);
end_Hash.put("tWriteJSONField_1_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [tWriteJSONField_1_Out end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMongoDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tMongoDBInput_3";

	

 



/**
 * [tMongoDBInput_3 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tWriteJSONField_1_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_Out";

	

		java.util.Queue listGroupby_tWriteJSONField_1_Out = (java.util.Queue)globalMap.get("queue_tWriteJSONField_1_In");
		if(resourceMap.get("finish_tWriteJSONField_1_Out") == null){
			globalMap.put("tWriteJSONField_1_In_FINISH_WITH_EXCEPTION" + (listGroupby_tWriteJSONField_1_Out==null?"":listGroupby_tWriteJSONField_1_Out.hashCode()), "true");
		}
	
	if (listGroupby_tWriteJSONField_1_Out != null) {
		globalMap.put("tWriteJSONField_1_In_FINISH" + (listGroupby_tWriteJSONField_1_Out==null?"":listGroupby_tWriteJSONField_1_Out.hashCode()), "true");
	}

 



/**
 * [tWriteJSONField_1_Out finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMongoDBInput_3_SUBPROCESS_STATE", 1);
	}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";

	
		int tos_count_tDBConnection_1 = 0;
		


	
            String dbProperties_tDBConnection_1 = "";
            String url_tDBConnection_1 = "jdbc:postgresql://"+context.PostgresqlIBmCloud_Server+":"+context.PostgresqlIBmCloud_Port+"/"+context.PostgresqlIBmCloud_Database;
            
            if(dbProperties_tDBConnection_1 != null && !"".equals(dbProperties_tDBConnection_1.trim())) {
                url_tDBConnection_1 = url_tDBConnection_1 + "?" + dbProperties_tDBConnection_1;
            }
	String dbUser_tDBConnection_1 = context.PostgresqlIBmCloud_Login;
	
	
		
	final String decryptedPassword_tDBConnection_1 = context.PostgresqlIBmCloud_Password; 
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
        java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_1 =  java.sql.DriverManager.getDrivers();
        java.util.Set<String> redShiftDriverNames_tDBConnection_1 = new java.util.HashSet<String>(java.util.Arrays
                .asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver","com.amazon.redshift.jdbc42.Driver"));
    while (drivers_tDBConnection_1.hasMoreElements()) {
        java.sql.Driver d_tDBConnection_1 = drivers_tDBConnection_1.nextElement();
        if (redShiftDriverNames_tDBConnection_1.contains(d_tDBConnection_1.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tDBConnection_1);
                java.sql.DriverManager.registerDriver(d_tDBConnection_1);
            } catch (java.lang.Exception e_tDBConnection_1) {
                    //do nothing
            }
        }
    }
					String driverClass_tDBConnection_1 = "org.postgresql.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(true);
	}

	globalMap.put("schema_" + "tDBConnection_1",context.PostgresqlIBmCloud_Schema);

	globalMap.put("conn_" + "tDBConnection_1",conn_tDBConnection_1);

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class questionnairetopostgresqlserverStruct implements routines.system.IPersistableRow<questionnairetopostgresqlserverStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire = new byte[0];

	
			    public String _id;

				public String get_id () {
					return this._id;
				}
				
			    public String questionID;

				public String getQuestionID () {
					return this.questionID;
				}
				
			    public String question;

				public String getQuestion () {
					return this.question;
				}
				
			    public String typeOfAnswer;

				public String getTypeOfAnswer () {
					return this.typeOfAnswer;
				}
				
			    public String radiovalue;

				public String getRadiovalue () {
					return this.radiovalue;
				}
				
			    public String lookupvalue;

				public String getLookupvalue () {
					return this.lookupvalue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire.length == 0) {
   					commonByteArray_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire) {

        	try {

        		int length = 0;
		
					this._id = readString(dis);
					
					this.questionID = readString(dis);
					
					this.question = readString(dis);
					
					this.typeOfAnswer = readString(dis);
					
					this.radiovalue = readString(dis);
					
					this.lookupvalue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this._id,dos);
					
					// String
				
						writeString(this.questionID,dos);
					
					// String
				
						writeString(this.question,dos);
					
					// String
				
						writeString(this.typeOfAnswer,dos);
					
					// String
				
						writeString(this.radiovalue,dos);
					
					// String
				
						writeString(this.lookupvalue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("_id="+_id);
		sb.append(",questionID="+questionID);
		sb.append(",question="+question);
		sb.append(",typeOfAnswer="+typeOfAnswer);
		sb.append(",radiovalue="+radiovalue);
		sb.append(",lookupvalue="+lookupvalue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(questionnairetopostgresqlserverStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire = new byte[0];

	
			    public String _id;

				public String get_id () {
					return this._id;
				}
				
			    public String questionID;

				public String getQuestionID () {
					return this.questionID;
				}
				
			    public String question;

				public String getQuestion () {
					return this.question;
				}
				
			    public String typeOfAnswer;

				public String getTypeOfAnswer () {
					return this.typeOfAnswer;
				}
				
			    public String radiovalue;

				public String getRadiovalue () {
					return this.radiovalue;
				}
				
			    public String lookupvalue;

				public String getLookupvalue () {
					return this.lookupvalue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire.length == 0) {
   					commonByteArray_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire) {

        	try {

        		int length = 0;
		
					this._id = readString(dis);
					
					this.questionID = readString(dis);
					
					this.question = readString(dis);
					
					this.typeOfAnswer = readString(dis);
					
					this.radiovalue = readString(dis);
					
					this.lookupvalue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this._id,dos);
					
					// String
				
						writeString(this.questionID,dos);
					
					// String
				
						writeString(this.question,dos);
					
					// String
				
						writeString(this.typeOfAnswer,dos);
					
					// String
				
						writeString(this.radiovalue,dos);
					
					// String
				
						writeString(this.lookupvalue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("_id="+_id);
		sb.append(",questionID="+questionID);
		sb.append(",question="+question);
		sb.append(",typeOfAnswer="+typeOfAnswer);
		sb.append(",radiovalue="+radiovalue);
		sb.append(",lookupvalue="+lookupvalue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire = new byte[0];

	
			    public String _id;

				public String get_id () {
					return this._id;
				}
				
			    public String questionID;

				public String getQuestionID () {
					return this.questionID;
				}
				
			    public String question;

				public String getQuestion () {
					return this.question;
				}
				
			    public String typeOfAnswer;

				public String getTypeOfAnswer () {
					return this.typeOfAnswer;
				}
				
			    public String options;

				public String getOptions () {
					return this.options;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire.length == 0) {
   					commonByteArray_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire) {

        	try {

        		int length = 0;
		
					this._id = readString(dis);
					
					this.questionID = readString(dis);
					
					this.question = readString(dis);
					
					this.typeOfAnswer = readString(dis);
					
					this.options = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this._id,dos);
					
					// String
				
						writeString(this.questionID,dos);
					
					// String
				
						writeString(this.question,dos);
					
					// String
				
						writeString(this.typeOfAnswer,dos);
					
					// String
				
						writeString(this.options,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("_id="+_id);
		sb.append(",questionID="+questionID);
		sb.append(",question="+question);
		sb.append(",typeOfAnswer="+typeOfAnswer);
		sb.append(",options="+options);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire = new byte[0];

	
			    public String _id;

				public String get_id () {
					return this._id;
				}
				
			    public String questionstree;

				public String getQuestionstree () {
					return this.questionstree;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire.length == 0) {
   					commonByteArray_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire) {

        	try {

        		int length = 0;
		
					this._id = readString(dis);
					
					this.questionstree = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this._id,dos);
					
					// String
				
						writeString(this.questionstree,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("_id="+_id);
		sb.append(",questionstree="+questionstree);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tWriteJSONField_1_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWriteJSONField_1_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
row3Struct row3 = new row3Struct();
row4Struct row4 = new row4Struct();
questionnairetopostgresqlserverStruct questionnairetopostgresqlserver = new questionnairetopostgresqlserverStruct();







	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"questionnairetopostgresqlserver");
					}
				
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = ("sdmQuestionnaire");
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("sdmQuestionnaire");
}

int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	conn_tDBOutput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	


   int batchSize_tDBOutput_1 = 10000;
   int batchSizeCounter_tDBOutput_1=0;

int count_tDBOutput_1=0;
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_1 = conn_tDBOutput_1.getMetaData();
                                boolean whetherExist_tDBOutput_1 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_1 = dbMetaData_tDBOutput_1.getTables(null, null, null, new String[]{"TABLE"})) {
                                    String defaultSchema_tDBOutput_1 = "public";
                                    if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
                                        try(java.sql.Statement stmtSchema_tDBOutput_1 = conn_tDBOutput_1.createStatement();
                                            java.sql.ResultSet rsSchema_tDBOutput_1 = stmtSchema_tDBOutput_1.executeQuery("select current_schema() ")) {
                                            while(rsSchema_tDBOutput_1.next()){
                                                defaultSchema_tDBOutput_1 = rsSchema_tDBOutput_1.getString("current_schema");
                                            }
                                        }
                                    }
                                    while(rsTable_tDBOutput_1.next()) {
                                        String table_tDBOutput_1 = rsTable_tDBOutput_1.getString("TABLE_NAME");
                                        String schema_tDBOutput_1 = rsTable_tDBOutput_1.getString("TABLE_SCHEM");
                                        if(table_tDBOutput_1.equals(("sdmQuestionnaire"))
                                            && (schema_tDBOutput_1.equals(dbschema_tDBOutput_1) || ((dbschema_tDBOutput_1 ==null || dbschema_tDBOutput_1.trim().length() ==0) && defaultSchema_tDBOutput_1.equals(schema_tDBOutput_1)))) {
                                            whetherExist_tDBOutput_1 = true;
                                            break;
                                        }
                                    }
                                }
                                if(whetherExist_tDBOutput_1) {
                                    try (java.sql.Statement stmtDrop_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                                        stmtDrop_tDBOutput_1.execute("DROP TABLE \"" + tableName_tDBOutput_1 + "\"" );
                                    }
                                }
                                try(java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                                    stmtCreate_tDBOutput_1.execute("CREATE TABLE \"" + tableName_tDBOutput_1 + "\"(\"_id\" VARCHAR(250)  ,\"questionID\" VARCHAR(250)  ,\"question\" VARCHAR(250)  ,\"typeOfAnswer\" VARCHAR(250)  ,\"radiovalue\" VARCHAR(250)  ,\"lookupvalue\" VARCHAR(250)  )");
                                }
	    String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1 + "\" (\"_id\",\"questionID\",\"question\",\"typeOfAnswer\",\"radiovalue\",\"lookupvalue\") VALUES (?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
questionnairetopostgresqlserverStruct questionnairetopostgresqlserver_tmp = new questionnairetopostgresqlserverStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tExtractJSONFields_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tExtractJSONFields_2", false);
		start_Hash.put("tExtractJSONFields_2", System.currentTimeMillis());
		
	
	currentComponent="tExtractJSONFields_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tExtractJSONFields_2 = 0;
		

int nb_line_tExtractJSONFields_2 = 0;
String jsonStr_tExtractJSONFields_2 = "";

	

class JsonPathCache_tExtractJSONFields_2 {
	final java.util.Map<String,com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String,com.jayway.jsonpath.JsonPath>();
	
	public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
		if(jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
			return jsonPathString2compiledJsonPath.get(jsonPath);
		} else {
			com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath.compile(jsonPath);
			jsonPathString2compiledJsonPath.put(jsonPath,compiledLoopPath);
			return compiledLoopPath;
		}
	}
}

JsonPathCache_tExtractJSONFields_2 jsonPathCache_tExtractJSONFields_2 = new JsonPathCache_tExtractJSONFields_2();

 



/**
 * [tExtractJSONFields_2 begin ] stop
 */



	
	/**
	 * [tExtractJSONFields_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tExtractJSONFields_1", false);
		start_Hash.put("tExtractJSONFields_1", System.currentTimeMillis());
		
	
	currentComponent="tExtractJSONFields_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tExtractJSONFields_1 = 0;
		

int nb_line_tExtractJSONFields_1 = 0;
String jsonStr_tExtractJSONFields_1 = "";

	

class JsonPathCache_tExtractJSONFields_1 {
	final java.util.Map<String,com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String,com.jayway.jsonpath.JsonPath>();
	
	public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
		if(jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
			return jsonPathString2compiledJsonPath.get(jsonPath);
		} else {
			com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath.compile(jsonPath);
			jsonPathString2compiledJsonPath.put(jsonPath,compiledLoopPath);
			return compiledLoopPath;
		}
	}
}

JsonPathCache_tExtractJSONFields_1 jsonPathCache_tExtractJSONFields_1 = new JsonPathCache_tExtractJSONFields_1();

 



/**
 * [tExtractJSONFields_1 begin ] stop
 */



	
	/**
	 * [tWriteJSONField_1_In begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_1_In", false);
		start_Hash.put("tWriteJSONField_1_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_In";

	
		int tos_count_tWriteJSONField_1_In = 0;
		

				int nb_line_tWriteJSONField_1_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_tWriteJSONField_1_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_tWriteJSONField_1_In.clearNamespaces();
			    xmlSerializer_tWriteJSONField_1_In.setSkipNamespaces(true);
			    xmlSerializer_tWriteJSONField_1_In.setForceTopLevelObject(true);
				xmlSerializer_tWriteJSONField_1_In.setUseEmptyStrings(false);
				
					   java.util.Queue<row2Struct> queue_tWriteJSONField_1_In = (java.util.Queue<row2Struct>) globalMap.get("queue_tWriteJSONField_1_In");
					
				String readFinishMarkWithPipeId_tWriteJSONField_1_In = "tWriteJSONField_1_In_FINISH"+(queue_tWriteJSONField_1_In==null?"":queue_tWriteJSONField_1_In.hashCode());
				String str_tWriteJSONField_1_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_tWriteJSONField_1_In) || !queue_tWriteJSONField_1_In.isEmpty()) {
					if (!queue_tWriteJSONField_1_In.isEmpty()) {
			

 



/**
 * [tWriteJSONField_1_In begin ] stop
 */
	
	/**
	 * [tWriteJSONField_1_In main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_In";

	

                    row2Struct result_tWriteJSONField_1_In = queue_tWriteJSONField_1_In.poll();
                    str_tWriteJSONField_1_In = result_tWriteJSONField_1_In.questionstree;
                                row2._id = result_tWriteJSONField_1_In._id;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_tWriteJSONField_1_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_tWriteJSONField_1_In.setJsonStandard(jsonStandard_tWriteJSONField_1_In);
        net.sf.json.JSON json_tWriteJSONField_1_In = xmlSerializer_tWriteJSONField_1_In.read(str_tWriteJSONField_1_In);
        row2.questionstree = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_tWriteJSONField_1_In, jsonStandard_tWriteJSONField_1_In);
    
        nb_line_tWriteJSONField_1_In++;

 


	tos_count_tWriteJSONField_1_In++;

/**
 * [tWriteJSONField_1_In main ] stop
 */
	
	/**
	 * [tWriteJSONField_1_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_In";

	

 



/**
 * [tWriteJSONField_1_In process_data_begin ] stop
 */

	
	/**
	 * [tExtractJSONFields_1 main ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					

            if(row2.questionstree!=null){// C_01
                jsonStr_tExtractJSONFields_1 = row2.questionstree.toString();
   
row3 = null;

	

String loopPath_tExtractJSONFields_1 = "$.questionst.questionstree[*]";
java.util.List<Object> resultset_tExtractJSONFields_1 = new java.util.ArrayList<Object>();

boolean isStructError_tExtractJSONFields_1 = true;
com.jayway.jsonpath.ReadContext document_tExtractJSONFields_1 = null;
try {
	document_tExtractJSONFields_1 = com.jayway.jsonpath.JsonPath.parse(jsonStr_tExtractJSONFields_1);
	com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(loopPath_tExtractJSONFields_1);
	Object result_tExtractJSONFields_1 = document_tExtractJSONFields_1.read(compiledLoopPath_tExtractJSONFields_1,net.minidev.json.JSONObject.class);
	if (result_tExtractJSONFields_1 instanceof net.minidev.json.JSONArray) {
		resultset_tExtractJSONFields_1 = (net.minidev.json.JSONArray) result_tExtractJSONFields_1;
	} else {
		resultset_tExtractJSONFields_1.add(result_tExtractJSONFields_1);
	}
	
	isStructError_tExtractJSONFields_1 = false;
} catch (java.lang.Exception ex_tExtractJSONFields_1) {
		System.err.println(ex_tExtractJSONFields_1.getMessage());
}

String jsonPath_tExtractJSONFields_1 = null;
com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_1 = null;

Object value_tExtractJSONFields_1 = null;

Object root_tExtractJSONFields_1 = null;
for(int i_tExtractJSONFields_1=0; isStructError_tExtractJSONFields_1 || (i_tExtractJSONFields_1 < resultset_tExtractJSONFields_1.size());i_tExtractJSONFields_1++){
	if(!isStructError_tExtractJSONFields_1){
		Object row_tExtractJSONFields_1 = resultset_tExtractJSONFields_1.get(i_tExtractJSONFields_1);
            row3 = null;
	row3 = new row3Struct();
	nb_line_tExtractJSONFields_1++;
	try {
        		row3._id = row2._id;
		jsonPath_tExtractJSONFields_1 = "questionID";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row3.questionID = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row3.questionID = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "question";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row3.question = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row3.question = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "typeOfAnswer";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row3.typeOfAnswer = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row3.typeOfAnswer = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "options";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row3.options = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row3.options = 

		null

;
		}	
	} catch (java.lang.Exception ex_tExtractJSONFields_1) {
		    System.err.println(ex_tExtractJSONFields_1.getMessage());
		    row3 = null;	
	}
	
	}
    
	isStructError_tExtractJSONFields_1 = false;
	
//}


 


	tos_count_tExtractJSONFields_1++;

/**
 * [tExtractJSONFields_1 main ] stop
 */
	
	/**
	 * [tExtractJSONFields_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";

	

 



/**
 * [tExtractJSONFields_1 process_data_begin ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tExtractJSONFields_2 main ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					

            if(row3.options!=null){// C_01
                jsonStr_tExtractJSONFields_2 = row3.options.toString();
   
row4 = null;

	

String loopPath_tExtractJSONFields_2 = "$.[*]";
java.util.List<Object> resultset_tExtractJSONFields_2 = new java.util.ArrayList<Object>();

boolean isStructError_tExtractJSONFields_2 = true;
com.jayway.jsonpath.ReadContext document_tExtractJSONFields_2 = null;
try {
	document_tExtractJSONFields_2 = com.jayway.jsonpath.JsonPath.parse(jsonStr_tExtractJSONFields_2);
	com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(loopPath_tExtractJSONFields_2);
	Object result_tExtractJSONFields_2 = document_tExtractJSONFields_2.read(compiledLoopPath_tExtractJSONFields_2,net.minidev.json.JSONObject.class);
	if (result_tExtractJSONFields_2 instanceof net.minidev.json.JSONArray) {
		resultset_tExtractJSONFields_2 = (net.minidev.json.JSONArray) result_tExtractJSONFields_2;
	} else {
		resultset_tExtractJSONFields_2.add(result_tExtractJSONFields_2);
	}
	
	isStructError_tExtractJSONFields_2 = false;
} catch (java.lang.Exception ex_tExtractJSONFields_2) {
		System.err.println(ex_tExtractJSONFields_2.getMessage());
}

String jsonPath_tExtractJSONFields_2 = null;
com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_2 = null;

Object value_tExtractJSONFields_2 = null;

Object root_tExtractJSONFields_2 = null;
for(int i_tExtractJSONFields_2=0; isStructError_tExtractJSONFields_2 || (i_tExtractJSONFields_2 < resultset_tExtractJSONFields_2.size());i_tExtractJSONFields_2++){
	if(!isStructError_tExtractJSONFields_2){
		Object row_tExtractJSONFields_2 = resultset_tExtractJSONFields_2.get(i_tExtractJSONFields_2);
            row4 = null;
	row4 = new row4Struct();
	nb_line_tExtractJSONFields_2++;
	try {
        		row4._id = row3._id;
        		row4.questionID = row3.questionID;
        		row4.question = row3.question;
        		row4.typeOfAnswer = row3.typeOfAnswer;
		jsonPath_tExtractJSONFields_2 = "value";
		compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);
		
		try {
		    
		        value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2.read(row_tExtractJSONFields_2);
		    
				row4.radiovalue = value_tExtractJSONFields_2 == null ? 

		null

 : value_tExtractJSONFields_2.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
			row4.radiovalue = 

		null

;
		}
		jsonPath_tExtractJSONFields_2 = "label";
		compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);
		
		try {
		    
		        value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2.read(row_tExtractJSONFields_2);
		    
				row4.lookupvalue = value_tExtractJSONFields_2 == null ? 

		null

 : value_tExtractJSONFields_2.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
			row4.lookupvalue = 

		null

;
		}	
	} catch (java.lang.Exception ex_tExtractJSONFields_2) {
		    System.err.println(ex_tExtractJSONFields_2.getMessage());
		    row4 = null;	
	}
	
	}
    
	isStructError_tExtractJSONFields_2 = false;
	
//}


 


	tos_count_tExtractJSONFields_2++;

/**
 * [tExtractJSONFields_2 main ] stop
 */
	
	/**
	 * [tExtractJSONFields_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_2";

	

 



/**
 * [tExtractJSONFields_2 process_data_begin ] stop
 */
// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row4");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

questionnairetopostgresqlserver = null;


// # Output table : 'questionnairetopostgresqlserver'
questionnairetopostgresqlserver_tmp._id = row4._id ;
questionnairetopostgresqlserver_tmp.questionID = row4.questionID ;
questionnairetopostgresqlserver_tmp.question = row4.question ;
questionnairetopostgresqlserver_tmp.typeOfAnswer = row4.typeOfAnswer ;
questionnairetopostgresqlserver_tmp.radiovalue = row4.radiovalue ;
questionnairetopostgresqlserver_tmp.lookupvalue = row4.lookupvalue ;
questionnairetopostgresqlserver = questionnairetopostgresqlserver_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "questionnairetopostgresqlserver"
if(questionnairetopostgresqlserver != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"questionnairetopostgresqlserver");
					}
					



        whetherReject_tDBOutput_1 = false;
                    if(questionnairetopostgresqlserver._id == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, questionnairetopostgresqlserver._id);
}

                    if(questionnairetopostgresqlserver.questionID == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(2, questionnairetopostgresqlserver.questionID);
}

                    if(questionnairetopostgresqlserver.question == null) {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(3, questionnairetopostgresqlserver.question);
}

                    if(questionnairetopostgresqlserver.typeOfAnswer == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(4, questionnairetopostgresqlserver.typeOfAnswer);
}

                    if(questionnairetopostgresqlserver.radiovalue == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(5, questionnairetopostgresqlserver.radiovalue);
}

                    if(questionnairetopostgresqlserver.lookupvalue == null) {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(6, questionnairetopostgresqlserver.lookupvalue);
}

			
    		pstmt_tDBOutput_1.addBatch();
    		nb_line_tDBOutput_1++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_1++;
    		  
    			if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
                try {
						int countSum_tDBOutput_1 = 0;
						    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
				    	
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
            	    	batchSizeCounter_tDBOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_1){
				    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
				    	String errormessage_tDBOutput_1;
						if (ne_tDBOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
							errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
						}else{
							errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
						}
				    	
				    	int countSum_tDBOutput_1 = 0;
						for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
						
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
				    	System.err.println(errormessage_tDBOutput_1);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "questionnairetopostgresqlserver"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "row4"

		// end for
	}


	
		} // C_01
	
	
	/**
	 * [tExtractJSONFields_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_2";

	

 



/**
 * [tExtractJSONFields_2 process_data_end ] stop
 */

} // End of branch "row3"

		// end for
	}


	
		} // C_01
	
	
	/**
	 * [tExtractJSONFields_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";

	

 



/**
 * [tExtractJSONFields_1 process_data_end ] stop
 */



	
	/**
	 * [tWriteJSONField_1_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_In";

	

 



/**
 * [tWriteJSONField_1_In process_data_end ] stop
 */
	
	/**
	 * [tWriteJSONField_1_In end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_In";

	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_tWriteJSONField_1_In = "tWriteJSONField_1_In_FINISH_WITH_EXCEPTION"+(queue_tWriteJSONField_1_In==null?"":queue_tWriteJSONField_1_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_1_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_1_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_1_In);
						return;
					}
					globalMap.remove("queue_tWriteJSONField_1_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_tWriteJSONField_1_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_tWriteJSONField_1_In);
			
globalMap.put("tWriteJSONField_1_NB_LINE",nb_line_tWriteJSONField_1_In);
 

ok_Hash.put("tWriteJSONField_1_In", true);
end_Hash.put("tWriteJSONField_1_In", System.currentTimeMillis());




/**
 * [tWriteJSONField_1_In end ] stop
 */

	
	/**
	 * [tExtractJSONFields_1 end ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";

	
   globalMap.put("tExtractJSONFields_1_NB_LINE", nb_line_tExtractJSONFields_1);


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tExtractJSONFields_1", true);
end_Hash.put("tExtractJSONFields_1", System.currentTimeMillis());




/**
 * [tExtractJSONFields_1 end ] stop
 */

	
	/**
	 * [tExtractJSONFields_2 end ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_2";

	
   globalMap.put("tExtractJSONFields_1_NB_LINE", nb_line_tExtractJSONFields_2);


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tExtractJSONFields_2", true);
end_Hash.put("tExtractJSONFields_2", System.currentTimeMillis());




/**
 * [tExtractJSONFields_2 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



	    try {
				int countSum_tDBOutput_1 = 0;
				if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {
						
					for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_1){
	    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
	    	String errormessage_tDBOutput_1;
			if (ne_tDBOutput_1 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
				errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
			}else{
				errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
			}
	    	
	    	int countSum_tDBOutput_1 = 0;
			for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
				countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
			}
			
	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
	    	
	    	System.err.println(errormessage_tDBOutput_1);
	    	
		}
	    
        if(pstmt_tDBOutput_1 != null) {
        		
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"questionnairetopostgresqlserver");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWriteJSONField_1_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_In";

	

 



/**
 * [tWriteJSONField_1_In finally ] stop
 */

	
	/**
	 * [tExtractJSONFields_1 finally ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";

	

 



/**
 * [tExtractJSONFields_1 finally ] stop
 */

	
	/**
	 * [tExtractJSONFields_2 finally ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_2";

	

 



/**
 * [tExtractJSONFields_2 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWriteJSONField_1_In_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "production";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaireClass = new MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire();

        int exitCode = MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaireClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire.class.getClassLoader().getResourceAsStream("local_project/mongodb_to_sqlserver_extract_sdmquestionnaire_load_outputfile_sdmquestionnaire_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("PostgresqlIBmCloud_Server", "id_String");
                            context.PostgresqlIBmCloud_Server=(String) context.getProperty("PostgresqlIBmCloud_Server");
                        context.setContextType("PostgresqlIBmCloud_Database", "id_String");
                            context.PostgresqlIBmCloud_Database=(String) context.getProperty("PostgresqlIBmCloud_Database");
                        context.setContextType("PostgresqlIBmCloud_Login", "id_String");
                            context.PostgresqlIBmCloud_Login=(String) context.getProperty("PostgresqlIBmCloud_Login");
                        context.setContextType("PostgresqlIBmCloud_Password", "id_Password");
                            String pwd_PostgresqlIBmCloud_Password_value = context.getProperty("PostgresqlIBmCloud_Password");
                            context.PostgresqlIBmCloud_Password = null;
                            if(pwd_PostgresqlIBmCloud_Password_value!=null) {
                                if(context_param.containsKey("PostgresqlIBmCloud_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.PostgresqlIBmCloud_Password = pwd_PostgresqlIBmCloud_Password_value;
                                } else if (!pwd_PostgresqlIBmCloud_Password_value.isEmpty()) {
                                    try {
                                        context.PostgresqlIBmCloud_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_PostgresqlIBmCloud_Password_value);
                                        context.put("PostgresqlIBmCloud_Password",context.PostgresqlIBmCloud_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("PostgresqlIBmCloud_Port", "id_String");
                            context.PostgresqlIBmCloud_Port=(String) context.getProperty("PostgresqlIBmCloud_Port");
                        context.setContextType("PostgresqlIBmCloud_AdditionalParams", "id_String");
                            context.PostgresqlIBmCloud_AdditionalParams=(String) context.getProperty("PostgresqlIBmCloud_AdditionalParams");
                        context.setContextType("PostgresqlIBmCloud_Schema", "id_String");
                            context.PostgresqlIBmCloud_Schema=(String) context.getProperty("PostgresqlIBmCloud_Schema");
                        context.setContextType("password", "id_Password");
                            String pwd_password_value = context.getProperty("password");
                            context.password = null;
                            if(pwd_password_value!=null) {
                                if(context_param.containsKey("password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.password = pwd_password_value;
                                } else if (!pwd_password_value.isEmpty()) {
                                    try {
                                        context.password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_password_value);
                                        context.put("password",context.password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("host1", "id_String");
                            context.host1=(String) context.getProperty("host1");
                        context.setContextType("host2", "id_String");
                            context.host2=(String) context.getProperty("host2");
                        context.setContextType("host3", "id_String");
                            context.host3=(String) context.getProperty("host3");
                        context.setContextType("port", "id_Integer");
                            try{
                                context.port=routines.system.ParserUtils.parseTo_Integer (context.getProperty("port"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "port", e.getMessage()));
                                context.port=null;
                            }
                        context.setContextType("user", "id_String");
                            context.user=(String) context.getProperty("user");
                        context.setContextType("KeyStore", "id_String");
                            context.KeyStore=(String) context.getProperty("KeyStore");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("PostgresqlIBmCloud_Server")) {
                context.PostgresqlIBmCloud_Server = (String) parentContextMap.get("PostgresqlIBmCloud_Server");
            }if (parentContextMap.containsKey("PostgresqlIBmCloud_Database")) {
                context.PostgresqlIBmCloud_Database = (String) parentContextMap.get("PostgresqlIBmCloud_Database");
            }if (parentContextMap.containsKey("PostgresqlIBmCloud_Login")) {
                context.PostgresqlIBmCloud_Login = (String) parentContextMap.get("PostgresqlIBmCloud_Login");
            }if (parentContextMap.containsKey("PostgresqlIBmCloud_Password")) {
                context.PostgresqlIBmCloud_Password = (java.lang.String) parentContextMap.get("PostgresqlIBmCloud_Password");
            }if (parentContextMap.containsKey("PostgresqlIBmCloud_Port")) {
                context.PostgresqlIBmCloud_Port = (String) parentContextMap.get("PostgresqlIBmCloud_Port");
            }if (parentContextMap.containsKey("PostgresqlIBmCloud_AdditionalParams")) {
                context.PostgresqlIBmCloud_AdditionalParams = (String) parentContextMap.get("PostgresqlIBmCloud_AdditionalParams");
            }if (parentContextMap.containsKey("PostgresqlIBmCloud_Schema")) {
                context.PostgresqlIBmCloud_Schema = (String) parentContextMap.get("PostgresqlIBmCloud_Schema");
            }if (parentContextMap.containsKey("password")) {
                context.password = (java.lang.String) parentContextMap.get("password");
            }if (parentContextMap.containsKey("host1")) {
                context.host1 = (String) parentContextMap.get("host1");
            }if (parentContextMap.containsKey("host2")) {
                context.host2 = (String) parentContextMap.get("host2");
            }if (parentContextMap.containsKey("host3")) {
                context.host3 = (String) parentContextMap.get("host3");
            }if (parentContextMap.containsKey("port")) {
                context.port = (Integer) parentContextMap.get("port");
            }if (parentContextMap.containsKey("user")) {
                context.user = (String) parentContextMap.get("user");
            }if (parentContextMap.containsKey("KeyStore")) {
                context.KeyStore = (String) parentContextMap.get("KeyStore");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("PostgresqlIBmCloud_Password");
			parametersToEncrypt.add("password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}



this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tSetKeystore_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tSetKeystore_1) {
globalMap.put("tSetKeystore_1_SUBPROCESS_STATE", -1);

e_tSetKeystore_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : MongoDB_to_SQLserver_Extract_sdmQuestionnaire_Load_OUTPUTfile_sdmQuestionnaire");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     144629 characters generated by Talend Open Studio for Big Data 
 *     on the July 30, 2021 at 10:54:24 AM CDT
 ************************************************************************************************/